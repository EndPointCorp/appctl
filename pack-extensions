#!/bin/bash
# vim:set ai sts=4 ts=4 sw=4 expandtab filetype=sh:

MY_DIR="$( dirname "${0}" )"
EXT_DIR="extensions"
UPDATE_SERVER="lg-head"

if [ "${MY_DIR}" == "." ]; then
    MY_DIR="${PWD}"
fi

# excluding sigs+keys just in case - but they actually live outside the "extensions" dir
for ext_dir in `find "${MY_DIR}/${EXT_DIR}" -mindepth 1 -maxdepth 1 -regextype posix-egrep -type d \! -iregex "${MY_DIR}/${EXT_DIR}/(sigs|keys)"`; do

    echo "FOUND ${ext_dir}"
    extension="$( basename "${ext_dir}" )"

    if [ ! -f "${MY_DIR}/keys/${extension}.pem" ]; then
        echo "NO KEY ${MY_DIR}/keys/${extension}.pem"
        openssl genrsa -out "${MY_DIR}/keys/${extension}.pem" 4096
    fi
    if [ ! -f "${ext_dir}.pub" ]; then
        openssl rsa -pubout -outform DER < "${MY_DIR}/keys/${extension}.pem" > "${ext_dir}.pub"
    fi
    if [ ! -f "${ext_dir}.eid" ]; then
        sha256sum < "${ext_dir}.pub" | head -c32 | tr '0-9a-f' 'a-p' > "${ext_dir}.eid"
    fi

    crx_version="$( python -c 'import sys,json;response=json.loads(sys.stdin.read()); print response["version"]' < "${ext_dir}/manifest.json" )"
    # if we cannot grab the version from the manifest, then we should not even
    # try to build the CRX
    if [ -z "${crx_version}" ]; then
        exit 3
    fi

    pushd "${MY_DIR}/${EXT_DIR}"
        ./crxmake "${extension}" "${MY_DIR}/keys/${extension}.pem"
    popd

    cat << UPD_EOF > "${MY_DIR}/${EXT_DIR}/${extension}-upd.xml"
<?xml version='1.0' encoding='UTF-8'?>
<gupdate xmlns='http://www.google.com/update2/response' protocol='2.0'>
  <app appid='`cat "${ext_dir}.eid"`'>
    <updatecheck codebase='http://${UPDATE_SERVER}/extensions/${extension}.crx' version='${crx_version}' />
  </app>
</gupdate>
UPD_EOF

done
